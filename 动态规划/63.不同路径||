
# 注意一点，因为有了障碍，(i, j)如果就是障碍的话应该就保持初始状态（初始状态为0）。

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid):
        # 构造一个 dp table
        row, col = len(obstacleGrid), len(obstacleGrid[0])
        dp = [[0]*col   for j in range(row)]
        # 第一行
        for i in range(col):
            if obstacleGrid[0][i] == 1:
                break
            else:
                dp[0][i] = 1
        # 第一列
        for j in range(row):
            if obstacleGrid[j][0] == 1:
                break
            else:
                dp[j][0] = 1
        for i in range(1,row):
            for j in range(1,col):
                if obstacleGrid[i][j] != 1:
                    dp[i][j] = dp[i][j-1] + dp[i-1][j]
        return dp[row-1][col-1] # 或dp[-1][-1]
